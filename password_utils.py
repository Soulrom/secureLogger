import secrets
import string

class PasswordUtils:
    @staticmethod
    def generate_password(length=16, use_symbols=True):
        """–ì–µ–Ω–µ—Ä—É—î –±–µ–∑–ø–µ—á–Ω–∏–π –ø–∞—Ä–æ–ª—å"""
        characters = string.ascii_letters + string.digits
        if use_symbols:
            characters += "!@#$%^&*"
        password = ''.join(secrets.choice(characters) for _ in range(length))
        return password

    @staticmethod
    def check_password_strength(password):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —Å–∏–ª—É –ø–∞—Ä–æ–ª—è"""
        score = 0
        feedback = []
        if len(password) >= 8:
            score += 1
        else:
            feedback.append("–î–æ–≤–∂–∏–Ω–∞ –º–µ–Ω—à–µ 8 —Å–∏–º–≤–æ–ª—ñ–≤")
        if any(c.islower() for c in password):
            score += 1
        else:
            feedback.append("–ù–µ–º–∞—î –º–∞–ª–∏—Ö –ª—ñ—Ç–µ—Ä")
        if any(c.isupper() for c in password):
            score += 1
        else:
            feedback.append("–ù–µ–º–∞—î –≤–µ–ª–∏–∫–∏—Ö –ª—ñ—Ç–µ—Ä")
        if any(c.isdigit() for c in password):
            score += 1
        else:
            feedback.append("–ù–µ–º–∞—î —Ü–∏—Ñ—Ä")
        if any(c in "!@#$%^&*()_+-=[]{}|;:,.<>?" for c in password):
            score += 1
        else:
            feedback.append("–ù–µ–º–∞—î —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤")
        strength_levels = {
            0: "‚ùå –î—É–∂–µ —Å–ª–∞–±–∫–∏–π",
            1: "üî∏ –°–ª–∞–±–∫–∏–π", 
            2: "üî∂ –°–µ—Ä–µ–¥–Ω—ñ–π",
            3: "üî∑ –•–æ—Ä–æ—à–∏–π",
            4: "‚úÖ –°–∏–ª—å–Ω–∏–π",
            5: "üîí –î—É–∂–µ —Å–∏–ª—å–Ω–∏–π"
        }
        return strength_levels.get(score, "‚ùì –ù–µ–≤—ñ–¥–æ–º–æ"), feedback
