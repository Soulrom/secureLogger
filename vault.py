import click
from datetime import datetime
from vault_core import Vault
from password_utils import PasswordUtils

vault = Vault()

@click.group()
def cli():
    """üîê –ë–µ–∑–ø–µ—á–Ω–µ —Å—Ö–æ–≤–∏—â–µ –ø–∞—Ä–æ–ª—ñ–≤ –∑ —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è–º"""
    pass

@cli.command()
@click.option('--site', prompt='–°–∞–π—Ç/–°–µ—Ä–≤—ñ—Å', help='–ù–∞–∑–≤–∞ —Å–∞–π—Ç—É –∞–±–æ —Å–µ—Ä–≤—ñ—Å—É')
@click.option('--login', prompt='–õ–æ–≥—ñ–Ω/Email', help='–õ–æ–≥—ñ–Ω –∞–±–æ email')
@click.option('--password', prompt='–ü–∞—Ä–æ–ª—å (Enter –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó)', 
              default='', hide_input=True, help='–ü–∞—Ä–æ–ª—å –∞–±–æ –ø–æ—Ä–æ–∂–Ω—å–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó')
@click.option('--generate', '-g', is_flag=True, help='–ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –ø–∞—Ä–æ–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ')
@click.option('--length', '-l', default=16, help='–î–æ–≤–∂–∏–Ω–∞ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è')
def add(site, login, password, generate, length):
    """–î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å –¥–æ —Å—Ö–æ–≤–∏—â–∞"""
    db = vault.load_db()
    if site in db:
        if not click.confirm(f"–ó–∞–ø–∏—Å –¥–ª—è '{site}' –≤–∂–µ —ñ—Å–Ω—É—î. –ó–∞–º—ñ–Ω–∏—Ç–∏?"):
            click.echo("‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ")
            return
    if generate or not password:
        password = PasswordUtils.generate_password(length)
        click.echo(f"üé≤ –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–π –ø–∞—Ä–æ–ª—å: {password}")
    strength, feedback = PasswordUtils.check_password_strength(password)
    click.echo(f"üí™ –°–∏–ª–∞ –ø–∞—Ä–æ–ª—è: {strength}")
    if feedback:
        click.echo("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó: " + ", ".join(feedback))
    db[site] = {
        "login": login, 
        "password": password,
        "created": datetime.now().isoformat(),
        "updated": datetime.now().isoformat()
    }
    vault.save_db(db)
    click.echo(f"‚úÖ –î–æ–¥–∞–Ω–æ –∑–∞–ø–∏—Å –¥–ª—è: {site}")

@cli.command()
@click.option('--site', prompt='–°–∞–π—Ç/–°–µ—Ä–≤—ñ—Å', help='–ù–∞–∑–≤–∞ —Å–∞–π—Ç—É –¥–ª—è –ø–æ—à—É–∫—É')
@click.option('--copy', '-c', is_flag=True, help='–°–∫–æ–ø—ñ—é–≤–∞—Ç–∏ –ø–∞—Ä–æ–ª—å –≤ –±—É—Ñ–µ—Ä')
def get(site, copy):
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –ª–æ–≥—ñ–Ω —ñ –ø–∞—Ä–æ–ª—å –¥–ª—è —Å–∞–π—Ç—É"""
    db = vault.load_db()
    if site in db:
        record = db[site]
        click.echo(f"üåê –°–∞–π—Ç: {site}")
        click.echo(f"üë§ –õ–æ–≥—ñ–Ω: {record['login']}")
        click.echo(f"üîê –ü–∞—Ä–æ–ª—å: {record['password']}")
        if 'created' in record:
            click.echo(f"üìÖ –°—Ç–≤–æ—Ä–µ–Ω–æ: {record['created'][:19]}")
        if 'updated' in record:
            click.echo(f"üîÑ –û–Ω–æ–≤–ª–µ–Ω–æ: {record['updated'][:19]}")
        if copy:
            try:
                import pyperclip
                pyperclip.copy(record['password'])
                click.echo("üìã –ü–∞—Ä–æ–ª—å —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º—ñ–Ω—É")
            except ImportError:
                click.echo("üìã –î–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å: pip install pyperclip")
    else:
        matches = [s for s in db.keys() if site.lower() in s.lower()]
        if matches:
            click.echo(f"‚ùì –¢–æ—á–Ω–æ–≥–æ —Å–ø—ñ–≤–ø–∞–¥—ñ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ú–æ–∂–ª–∏–≤–æ –≤–∏ –º–∞–ª–∏ –Ω–∞ —É–≤–∞–∑—ñ:")
            for match in matches:
                click.echo(f"  - {match}")
        else:
            click.echo("‚ùå –ó–∞–ø–∏—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

@cli.command()
@click.option('--site', prompt='–°–∞–π—Ç –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è', help='–ù–∞–∑–≤–∞ —Å–∞–π—Ç—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è')
@click.option('--force', '-f', is_flag=True, help='–í–∏–¥–∞–ª–∏—Ç–∏ –±–µ–∑ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è')
def delete(site, force):
    """–í–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–ø–∏—Å –∑ —Å—Ö–æ–≤–∏—â–∞"""
    db = vault.load_db()
    if site in db:
        if force or click.confirm(f"–í–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–ø–∏—Å –¥–ª—è '{site}'?"):
            del db[site]
            vault.save_db(db)
            click.echo(f"üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ: {site}")
        else:
            click.echo("‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ")
    else:
        click.echo("‚ùå –ó–∞–ø–∏—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

@cli.command()
@click.option('--search', '-s', help='–§—ñ–ª—å—Ç—Ä –¥–ª—è –ø–æ—à—É–∫—É')
@click.option('--details', '-d', is_flag=True, help='–ü–æ–∫–∞–∑–∞—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é')
def list(search, details):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ —Å–∞–π—Ç–∏"""
    db = vault.load_db()
    if not db:
        click.echo("üì≠ –°—Ö–æ–≤–∏—â–µ –ø–æ—Ä–æ–∂–Ω—î")
        return
    sites = list(db.keys())
    if search:
        sites = [s for s in sites if search.lower() in s.lower()]
        if not sites:
            click.echo(f"‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å—ñ–≤ –∑ '{search}'")
            return
    click.echo(f"üåê –ó–∞–ø–∏—Å—ñ–≤ —É —Å—Ö–æ–≤–∏—â—ñ: {len(sites)}")
    click.echo("‚îÄ" * 50)
    for site in sorted(sites):
        if details:
            record = db[site]
            click.echo(f"üîπ {site}")
            click.echo(f"   üë§ –õ–æ–≥—ñ–Ω: {record['login']}")
            if 'created' in record:
                click.echo(f"   üìÖ –°—Ç–≤–æ—Ä–µ–Ω–æ: {record['created'][:19]}")
            click.echo()
        else:
            click.echo(f"üîπ {site}")

@cli.command()
@click.option('--length', '-l', default=16, help='–î–æ–≤–∂–∏–Ω–∞ –ø–∞—Ä–æ–ª—è')
@click.option('--count', '-c', default=1, help='–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–∞—Ä–æ–ª—ñ–≤')
@click.option('--no-symbols', is_flag=True, help='–ë–µ–∑ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤')
def generate(length, count, no_symbols):
    """–ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –±–µ–∑–ø–µ—á–Ω—ñ –ø–∞—Ä–æ–ª—ñ"""
    click.echo(f"üé≤ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è {count} –ø–∞—Ä–æ–ª—ñ–≤ –¥–æ–≤–∂–∏–Ω–æ—é {length} —Å–∏–º–≤–æ–ª—ñ–≤:")
    click.echo("‚îÄ" * 50)
    for i in range(count):
        password = PasswordUtils.generate_password(length, not no_symbols)
        strength, _ = PasswordUtils.check_password_strength(password)
        click.echo(f"{i+1:2d}. {password} [{strength}]")

@cli.command()
@click.option('--backup-file', default='backup.json', help='–§–∞–π–ª –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –∫–æ–ø—ñ—ó')
def backup(backup_file):
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é (–Ω–µ–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—É)"""
    vault.backup(backup_file)

@cli.command()
def stats():
    """–ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å—Ö–æ–≤–∏—â–∞"""
    db = vault.load_db()
    if not db:
        click.echo("üì≠ –°—Ö–æ–≤–∏—â–µ –ø–æ—Ä–æ–∂–Ω—î")
        return
    click.echo("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ö–æ–≤–∏—â–∞:")
    click.echo("‚îÄ" * 30)
    click.echo(f"üìà –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤: {len(db)}")
    weak_passwords = 0
    strong_passwords = 0
    for site, record in db.items():
        strength, _ = PasswordUtils.check_password_strength(record['password'])
        if "–î—É–∂–µ —Å–ª–∞–±–∫–∏–π" in strength or "–°–ª–∞–±–∫–∏–π" in strength:
            weak_passwords += 1
        elif "–°–∏–ª—å–Ω–∏–π" in strength or "–î—É–∂–µ —Å–∏–ª—å–Ω–∏–π" in strength:
            strong_passwords += 1
    click.echo(f"üîí –°–∏–ª—å–Ω–∏—Ö –ø–∞—Ä–æ–ª—ñ–≤: {strong_passwords}")
    click.echo(f"‚ö†Ô∏è  –°–ª–∞–±–∫–∏—Ö –ø–∞—Ä–æ–ª—ñ–≤: {weak_passwords}")
    if weak_passwords > 0:
        click.echo("üí° –†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Å–ª–∞–±–∫—ñ –ø–∞—Ä–æ–ª—ñ!")

if __name__ == "__main__":
    cli()